= form_for @network do |f|
  - if @network.errors.any?
    #error_explanation
      h2 = "#{pluralize(@network.errors.count, "error")} prohibited this network from being saved:"
      ul
        - @network.errors.full_messages.each do |message|
          li = message

  .form-group.row
    = f.label :name, class: 'col-sm-2 col-form-label'
    .col-sm-10
      = f.text_field :name, class: 'form-control'
  .form-group.row
    = f.label :vlan, class: 'col-sm-2 col-form-label'
    .col-sm-10
      = f.number_field :vlan, min: 0, max: 4095, class: 'form-control'
  .form-group.row
    .col-sm-2
      = Network.human_attribute_name(:use_auth)
    .col-sm-10
      .form-check
        = f.label :use_auth, class: 'form-check-label' do
          = f.check_box :use_auth, class: 'form-check-input'
          = Network.human_attribute_name(:use_auth)
  / IPv4
  .form-group.row
    = f.label :ipv4_nework, class: 'col-sm-2 col-form-label'
    .col-sm-10
      .form-check
        = f.label :use_ipv4, class: 'form-check-label' do
          = f.check_box :use_ipv4, class: 'form-check-input'
          = Network.human_attribute_name(:use_ipv4)
      - ipv4_network = @network.ipv4_networks.first || IpNetwork.new(ip_pools: [IpPool.new, IpPool.new])
      = f.fields_for :ipv4_network, ipv4_network do |f_ipv4|
        .form-row.align-items-center
          .col-auto
            = f_ipv4.label :network_type
            = f_ipv4.select :network_type, IpNetwork.network_types.keys, {}, class: 'form-control'
          .col-auto
            = f_ipv4.label :address
            = f_ipv4.text_field :address, maxlength: 15, class: 'form-control'
          .col-auto
            br
            | /
          .col-auto
            = f_ipv4.label :netmask
            = f_ipv4.number_field :netmask, min: 0, max: 32, class: 'form-control'
          .col-auto
            = f_ipv4.label :gateway
            = f_ipv4.text_field :gateway, maxlength: 15, class: 'form-control'
        = f_ipv4.label :ip_pools
        - p ipv4_network.ip_pools
        / = f_ipv4.fields_for :ip_pools do |f_ipv4pool|
        /   .form-row.align-items-center
        /     .col-auto
        /       = f_ipv4pool.select :network_type, IpPool.network_types.keys, {}, class: 'form-control'
        /     .col-auto
        /       = f_ipv4pool.text_field :first, maxlength: 15, class: 'form-control'
        /     .col-auto
        /       | 〜
        /     .col-auto
        /       = f_ipv4pool.text_field :last, maxlength: 15, class: 'form-control'
        #ipv4-pools
        script#ipv4-pools-list type="application/json"
          == ip_pools_to_json(ipv4_network.ip_pools)
        = f_ipv4.fields_for :ip_pools, IpPool.new do |f_ipv4pool|
          template#ipv4-pool-0
            .form-row.align-items-center
              .col-auto
                = f_ipv4pool.select :network_type, IpPool.network_types.keys, {},
                    class: 'form-control ip-pool-network-type-select'
              .col-auto
                = f_ipv4pool.text_field :first, maxlength: 15,
                    class: 'form-control ip-pool-first-text'
              .col-auto
                | 〜
              .col-auto
                = f_ipv4pool.text_field :last, maxlength: 15,
                    class: 'form-control, ip-pool-last-text'
        coffee:
          ipv4PoolTemplate = document.getElementById('ipv4-pool-0')
          ipv4Pools = document.getElementById('ipv4-pools')
          ipv4PoolsList = JSON.parse(document.getElementById('ipv4-pools-list').textContent)
          console.log(ipv4PoolsList)
          for ipv4Pool, i in ipv4PoolsList
            ipv4PoolNode = document.createElement('div')
            ipv4PoolNode.innerHTML = ipv4PoolTemplate.innerHTML
              .replace(/\b0\b/g, i.toString()).replace(/_0_/g, "_#{i}_")
            for networkTypeSelect in ipv4PoolNode.getElementsByClassName('ip-pool-network-type-select')
              for option in networkTypeSelect.getElementsByTagName('option')
                if option.value == ipv4Pool.network_type
                  option.selected = true
                else
                  option.selected = false
            for firstText in ipv4PoolNode.getElementsByClassName('ip-pool-first-text')
              firstText.value = ipv4Pool.first
            for lastText in ipv4PoolNode.getElementsByClassName('ip-pool-last-text')
              lastText.value = ipv4Pool.last
            ipv4Pools.appendChild(ipv4PoolNode)

  / IPv6
  .form-group.row
    = f.label :ipv6_nework, class: 'col-sm-2 col-form-label'
    .col-sm-10
      .form-check
        = f.label :use_ipv6, class: 'form-check-label' do
          = f.check_box :use_ipv6, class: 'form-check-input'
          = Network.human_attribute_name(:use_ipv6)
      .form-row.align-items-center
        - ipv6_network = @network.ipv6_networks.first || IpNetwork.new
        = f.fields_for :ipv6_network, ipv6_network do |f_ipv6|
          .col-auto
            = f_ipv6.label :network_type
            = f_ipv6.select :network_type, IpNetwork.network_types.keys, {}, class: 'form-control'
          .col-auto
            = f_ipv6.label :address
            = f_ipv6.text_field :address, maxlength: 15, class: 'form-control'
          .col-auto
            br
            | /
          .col-auto
            = f_ipv6.label :netmask
            = f_ipv6.number_field :netmask, min: 0, max: 32, class: 'form-control'
          .col-auto
            = f_ipv6.label :gateway
            = f_ipv6.text_field :gateway, maxlength: 15, class: 'form-control'
  .form-group.row
    = f.label :note, class: 'col-sm-2 col-form-label'
    .col-sm-10
      = f.text_area :note, class: 'form-control'
  .actions = f.submit class: 'form-control'
